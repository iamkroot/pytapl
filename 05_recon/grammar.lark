start: (command ";")*

?command: term
        | CNAME ":" func_ty                   -> bind

?term: "lambda" CNAME (":" func_ty)? "." term -> abs
     | "let" CNAME "=" term "in" term         -> let
     | "if" term "then" term "else" term      -> if_stmt
     | app_term
     | "(" term ("," term)+ ")"               -> tuple

?app_term: "succ" aterm                       -> succ
         | "pred" aterm                       -> pred
         | "iszero" aterm                     -> iszero
         | aterm
         | app_term aterm                     -> app

?aterm: "(" term ")"
      | "true"                                -> true
      | "false"                               -> false
      | INT                                   -> nat
      | CNAME                                 -> var

?func_ty: type "->" func_ty                   -> arr_ty 
        | type

?type: "Nat"                                  -> nat_ty
     | "Bool"                                 -> bool_ty
     | ID_TY                                  -> id_ty
     | "(" func_ty ")"      
     | "(" func_ty ("," func_ty)+ ")"         -> tuple_ty

ID_TY: UCASE_LETTER ("_"|LETTER|DIGIT)*

%import common.WS
%import common.C_COMMENT
%import common.CPP_COMMENT
%import common.CNAME
%import common.UCASE_LETTER
%import common.DIGIT
%import common.LETTER
%import common.INT
%import common.SH_COMMENT
%ignore WS
%ignore C_COMMENT
%ignore CPP_COMMENT
%ignore SH_COMMENT